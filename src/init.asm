;
; NES init routine
;
; Copyright (c) 2014, Tim Hentenaar
; All rights reserved.
;
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are
; met:
;
; 1. Redistributions of source code must retain the above copyright
;    notice, this list of conditions and the following disclaimer.
;
; 2. Redistributions in binary form must reproduce the above copyright
;    notice, this list of conditions and the following disclaimer in the
;    documentation and/or other materials provided with the distribution.
;
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
; "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
; PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
; OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
; SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
; LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;

.import copy_palettes_to_ppu, clear_nametables, load_patterns
.import disable_ppu

; These symbols are generated by the linker.
.import __RAM_START__, __RAM_SIZE__

.importzp nmi
.exportzp irq, longptr

.zeropage
	; 16-bit temporary pointer
	longptr: .res 2

	; IRQ / BRK routine
	irq:     .res 3

.segment "STARTUP"
.include "ppu.inc"
.include "apu.inc"

; Memory Map for utilized RAM
.define zero_page    $0000
.define stack        $0100

;
; Reset / Initialization Vector
;
reset:
	sei ; Ensure IRQs are disabled
	cld ; Clear D flag (since the NES doesn't support decimal mode.)

	; Disable NMI / rendering
	jsr disable_ppu

	; Disable APU frame IRQs
	lda #$40
	sta APUFCTR

	; Disable APU channels
	lda #0
	sta APUSTAT

	; Initialize the memory that we'll be using
	ldx #$ff
:	sta zero_page,x
	sta stack,x
	sta $200,x
	dex
	bne :-

	; Setup some stack space ($0100 - $01FF)
	dex
	txs

	; Initialize the NMI and IRQ / BRK handlers
	lda #$40 ; RTI opcode
	sta nmi
	sta irq

	;
	; Clear the RAM area used for BSS
	;
	; The size must be aligned on a page boundary.
	;
	lda #0
	sta longptr
	lda #>__RAM_START__
	sta longptr+1
	ldx #>__RAM_SIZE__
:	lda #0
	tay
:	sta (longptr),y
	dey
	bne :-
	inc longptr+1
	dex
	bne :--

	; Give the PPU 2 frames to warm up
	bit PPUSTAT
	ldx #2
:	bit PPUSTAT
	bpl :-
	dex
	bne :-

	; Prepare palettes and clear the screen
	jsr copy_palettes_to_ppu
	jsr clear_nametables

	; Load the patterns
	jsr load_patterns

.segment "VECTORS"
	; Interrupt vector table
	.word nmi         ; NMI Vector
	.word reset       ; Reset Vector
	.word irq         ; IRQ / BRK Vector

; vi:set ft=ca65:
